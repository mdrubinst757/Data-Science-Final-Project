results <- read.csv('results.csv')
results1 <- read.csv('cc1.csv')
summary(results$classifier)
summary(results1$classifier)
summary(results1$X)
results <- read.csv('results.csv')
results1 <- read.csv('cc1.csv')
names(results1) <- sub('X', 'classifier', names(results1))
results1$kwset <- 'Ad Hoc'
results1$classifier <- sub('knn.table', 'knn', results1$classifier)
results1$classifier <- sub('l.svm.table', 'svm.l', results1$classifier)
results1$classifier <- sub('lda.table', 'lda', results1$classifier)
results1$classifier <- sub('lm.table', 'lpm', results1$classifier)
results1$classifier <- sub('r.svm.table', 'svm.r', results1$classifier)
results1$classifier <- sub('rf.table', 'rf', results1$classifier)
results <- rbind(results, results1)
newdata <- melt(results)
sensitivity <- newdata[newdata$variable=='Sensitivity' | newdata$variable=='Specificity',]
sensitivity$classifier <- sub('knn','KNN',sensitivity$classifier)
sensitivity$classifier <- sub('lda','LDA',sensitivity$classifier)
sensitivity$classifier <- sub('lpm','LPM',sensitivity$classifier)
sensitivity$classifier <- sub('rf','RF',sensitivity$classifier)
sensitivity$classifier <- sub('svm.l','SVM (linear)',sensitivity$classifier)
sensitivity$classifier <- sub('svm.r','SVM (radial)',sensitivity$classifier)
sensitivity$kwset <- sub('lasso','Lasso',sensitivity$kwset)
sensitivity$kwset <- sub('t10','T10',sensitivity$kwset)
sensitivity$kwset <- sub('t100','T100',sensitivity$kwset)
sensitivity$kwset <- sub('t50b50','T50B50',sensitivity$kwset)
names(sensitivity) <- c('classifier','Keywords.Selection', 'Performance', 'Value')
c <- ggplot(sensitivity, aes(x=Keywords.Selection, y=Value, fill=Performance))
c <- c + geom_bar(stat='identity', position=position_dodge())
c <- c + facet_wrap(~classifier)
c <- c + ggtitle('Comparative Model Performance')
c
ggsave('results.png')
results$classifier <- sub('knn','KNN',results$classifier)
results$classifier <- sub('lda','LDA',results$classifier)
results$classifier <- sub('lpm','LPM',results$classifier)
results$classifier <- sub('rf','RF',results$classifier)
results$classifier <- sub('svm.l','SVM (linear)',results$classifier)
results$classifier <- sub('svm.r','SVM (radial)',results$classifier)
results$kwset <- sub('lasso','Lasso',results$kwset)
results$kwset <- sub('t10','T10',results$kwset)
results$kwset <- sub('t100','T100',results$kwset)
results$kwset <- sub('t50b50','T50B50',results$kwset)
head(results)
fix(results)
write.csv('finalresults.csv', results, row.names=F)
write.csv(results,'finalresults.csv',row.names=F)
data <- read.csv('scrape.csv')
dmatrix <- data[,c(2:9,12)] ##DF of only y and x variables
names(data)
names(final)
names(final)[1:5]
names(data)
final$Website %in% data$Website
data <- data[grep("TRUE", data$Website %in% final%Website),]
data <- data[grep("TRUE", data$Website %in% final%Website),]
grep("TRUE", data$Website %in% final%Website)
grep('TRUE', data$Website %in% final%Website)
grep('TRUE', data$Website %in% final%Website)
grep('TRUE', data$Website %in% final$Website)
data <- data[grep("TRUE", data$Website %in% final$Website),]
a <- data[,c('Website', 'healthcat')]
final <- merge(a, mydtm_df, by.x='Website', by.y='url')
final <- final[grep('FALSE', duplicated(final$Website)),]
data <- data[grep("TRUE", data$Website %in% final$Website),]
dmatrix <- data[,c(2:9,12)] ##DF of only y and x variables
data <- data[grep('FALSE', duplicated(data$Website)),]
dmatrix <- data[,c(2:9,12)] ##DF of only y and x variables
#####################################
#######K NEAREST NEIGHBORS###########
#####################################
set.seed(30)
cv.est <- knn.cv(dmatrix, cl=dmatrix$healthcat)
knn.cm <- confusionMatrix(cv.est, dmatrix$healthcat)
knn.table <- knn.cm$byClass
#####################################
##############LPM####################
#####################################
set.seed(98)
fit <- lm(healthcat ~ ., data=dmatrix)
cv <- cv.lm(df=dmatrix, fit, m=5)
binary <- ifelse(cv$cvpred>0.5,1,0)
lm.cm <- confusionMatrix(binary, dmatrix$healthcat)
lm.table <- lm.cm$byClass
####################################
###########LDA AND QDA##############
####################################
set.seed(73)
fit <- lda(healthcat ~ . , data = dmatrix, CV=TRUE)
lda.cm <- confusionMatrix(fit$class, dmatrix$healthcat)
lda.table <- lda.cm$byClass
table(fit$class, dmatrix$healthcat)
####################################
###########RANDOM FORESTS###########
####################################
set.seed(333)
dmatrix$healthcat = as.factor(dmatrix$healthcat)
rf = randomForest(healthcat~., dmatrix)
rf.cm <- confusionMatrix(rf$predicted, dmatrix$healthcat)
rf.table <- rf.cm$byClass
####################################
#######SUPPORT VECTOR MACHINES######
####################################
names(dmatrix)
svmcv <- dmatrix[-696,-c(3,8)] ##Getting Rid of Optical and Quality
svmcv$healthcat <- as.factor(svmcv$healthcat)
names(svmcv)
##Cross-Validation for Test Error Estimate
set.seed(304)
randoms = sample(1:nrow(svmcv), nrow(svmcv))
splits = split(randoms, ceiling(seq_along(randoms)/(length(randoms)/5)))
train1 = svmcv[splits$`1`,]
train2 = svmcv[splits$`2`,]
train3 = svmcv[splits$`3`,]
train4 = svmcv[splits$`4`,]
train5 = svmcv[splits$`5`,]
##CV FOLD 1
train = rbind(train2, train3, train4, train5)
test1 = train1
##Linear Kernel
set.seed(35)
l.tune.out = tune(svm, healthcat~., data=train, kernel='linear',
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
lbestmod.l1 = l.tune.out$best.model
svm.l1 <- predict(lbestmod.l1, test1)
##CV FOLD 2
train = rbind(train2, train3, train4, train1)
test2 = train5
set.seed(11)
l.tune.out = tune(svm, healthcat~., data=train, kernel='linear',
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
lbestmod.l2 = l.tune.out$best.model
svm.l2 <- predict(lbestmod.l2, test2)
##CV FOLD 3
train = rbind(train5, train3, train4, train1)
test3 = train2
set.seed(5)
l.tune.out = tune(svm, healthcat~., data=train, kernel='linear',
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
lbestmod.l3 = l.tune.out$best.model
svm.l3 <- predict(lbestmod.l3, test3)
##CV FOLD 4
train = rbind(train5, train2, train4, train1)
test4 = train3
set.seed(811)
l.tune.out = tune(svm, healthcat~., data=train, kernel='linear',
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
lbestmod.l4 = l.tune.out$best.model
svm.l4 <- predict(lbestmod.l4, test4)
##CV FOLD 5
train = rbind(train5, train2, train3, train1)
test5 = train4
set.seed(424)
l.tune.out = tune(svm, healthcat~., data=train, kernel='linear',
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
lbestmod.l5 = l.tune.out$best.model
svm.l5 <- predict(lbestmod.l5, test5)
svm.l1 <- as.data.frame(svm.l1)
svm.l2 <- as.data.frame(svm.l2)
svm.l3 <- as.data.frame(svm.l3)
svm.l4 <- as.data.frame(svm.l4)
svm.l5 <- as.data.frame(svm.l5)
svm.l1$id <- rownames(svm.l1)
svm.l2$id <- rownames(svm.l2)
svm.l3$id <- rownames(svm.l3)
svm.l4$id <- rownames(svm.l4)
svm.l5$id <- rownames(svm.l5)
names(svm.l1) <- c('pred', 'id')
names(svm.l2) <- c('pred', 'id')
names(svm.l3) <- c('pred', 'id')
names(svm.l4) <- c('pred', 'id')
names(svm.l5) <- c('pred', 'id')
svmlpred <- rbind(svm.l1, svm.l2, svm.l3, svm.l4, svm.l5)
svmcv$id <- c(1:nrow(svmcv))
lpred <- merge(svmcv, svmlpred, by='id')
l.svm <- confusionMatrix(lpred$pred, lpred$healthcat)
l.svm.table <- l.svm$byClass
####Radial Kernel####
##Cross-Validation for Test Error Estimate
set.seed(383)
randoms = sample(1:nrow(svmcv), nrow(svmcv))
splits = split(randoms, ceiling(seq_along(randoms)/(length(randoms)/5)))
train1 = svmcv[splits$`1`,]
train2 = svmcv[splits$`2`,]
train3 = svmcv[splits$`3`,]
train4 = svmcv[splits$`4`,]
train5 = svmcv[splits$`5`,]
##CV FOLD 1
train = rbind(train2, train3, train4, train5)
test1 = train1
set.seed(8)
r.tune.out = tune(svm, healthcat~., data=train, kernel='radial',
ranges=list(cost=c(0.1,1,10,100,1000),
gamma=c(0.5,1,2,3,4)))
rbestmod.r1 = r.tune.out$best.model
svm.r1 <- predict(rbestmod.r1, test1)
##CV FOLD 2
train = rbind(train2, train3, train4, train1)
test2 = train5
set.seed(235236)
r.tune.out = tune(svm, healthcat~., data=train, kernel='radial',
ranges=list(cost=c(0.1,1,10,100,1000),
gamma=c(0.5,1,2,3,4)))
rbestmod.r2 = r.tune.out$best.model
svm.r2 <- predict(rbestmod.r2, test2)
##CV FOLD 3
train = rbind(train5, train3, train4, train1)
test3 = train2
set.seed(46622)
r.tune.out = tune(svm, healthcat~., data=train, kernel='radial',
ranges=list(cost=c(0.1,1,10,100,1000),
gamma=c(0.5,1,2,3,4)))
rbestmod.r3 = r.tune.out$best.model
svm.r3 <- predict(rbestmod.r3, test3)
##CV FOLD 4
train = rbind(train5, train2, train4, train1)
test4 = train3
set.seed(1114)
r.tune.out = tune(svm, healthcat~., data=train, kernel='radial',
ranges=list(cost=c(0.1,1,10,100,1000),
gamma=c(0.5,1,2,3,4)))
rbestmod.r4 = r.tune.out$best.model
svm.r4 <- predict(rbestmod.r4, test4)
##CV FOLD 5
train = rbind(train5, train2, train3, train1)
test5 = train4
set.seed(33525)
r.tune.out = tune(svm, healthcat~., data=train, kernel='radial',
ranges=list(cost=c(0.1,1,10,100,1000),
gamma=c(0.5,1,2,3,4)))
rbestmod.r5 = r.tune.out$best.model
svm.r5 <- predict(rbestmod.r5, test5)
svm.r1 <- as.data.frame(svm.r1)
svm.r2 <- as.data.frame(svm.r2)
svm.r3 <- as.data.frame(svm.r3)
svm.r4 <- as.data.frame(svm.r4)
svm.r5 <- as.data.frame(svm.r5)
svm.r1$id <- rownames(svm.r1)
svm.r2$id <- rownames(svm.r2)
svm.r3$id <- rownames(svm.r3)
svm.r4$id <- rownames(svm.r4)
svm.r5$id <- rownames(svm.r5)
names(svm.r1) <- c('pred', 'id')
names(svm.r2) <- c('pred', 'id')
names(svm.r3) <- c('pred', 'id')
names(svm.r4) <- c('pred', 'id')
names(svm.r5) <- c('pred', 'id')
svmlpred <- rbind(svm.r1, svm.r2, svm.r3, svm.r4, svm.r5)
svmcv$id <- c(1:nrow(svmcv))
rpred <- merge(svmcv, svmlpred, by='id')
r.svm <- confusionMatrix(rpred$pred, rpred$healthcat)
r.svm.table <- r.svm$byClass
###DATAFRAME OF COMPARATIVE ERROR RATES###
table <- rbind(lm.table, lda.table, rf.table, l.svm.table, r.svm.table,
knn.table)
table <- as.data.frame(table)
table
set.seed(73)
fit <- lda(healthcat ~ . , data = dmatrix, CV=TRUE)
lda.cm <- confusionMatrix(fit$class, dmatrix$healthcat)
lda.table <- lda.cm$byClass
set.seed(73)
fit <- lda(healthcat ~ . , data = dmatrix, CV=TRUE)
lda.cm <- confusionMatrix(fit$class, dmatrix$healthcat)
lda.table <- lda.cm$byClass
lda.table
)
)
()
fit$class
fit
fit <- lda(healthcat ~ . , data = dmatrix, CV=TRUE)
summary(data)
summary(dmatrix)
ldamatrix <- dmatrix[,-c(3,8)]
fit <- lda(healthcat ~ . , data = ldanatrix, CV=TRUE)
fit <- lda(healthcat ~ . , data = ldamatrix, CV=TRUE)
lda.cm <- confusionMatrix(fit$class, dmatrix$healthcat)
lda.table <- lda.cm$byClass
lda.table
table(fit$class, dmatrix$healthcat)
table <- rbind(lm.table, lda.table, rf.table, l.svm.table, r.svm.table,
knn.table)
table <- as.data.frame(table)
table
write.csv(table, 'adhocresults.csv', row.names=T, sep=',')
write.csv(table, 'adhocresults.csv', row.names=T)
results <- read.csv('results.csv')
results1 <- read.csv('adhocresults.csv')
names(results1) <- sub('X', 'classifier', names(results1))
results1$kwset <- 'Ad Hoc'
results1$classifier <- sub('knn.table', 'knn', results1$classifier)
results1$classifier <- sub('l.svm.table', 'svm.l', results1$classifier)
results1$classifier <- sub('lda.table', 'lda', results1$classifier)
results1$classifier <- sub('lm.table', 'lpm', results1$classifier)
results1$classifier <- sub('r.svm.table', 'svm.r', results1$classifier)
results1$classifier <- sub('rf.table', 'rf', results1$classifier)
results <- rbind(results, results1)
newdata <- melt(results)
sensitivity <- newdata[newdata$variable=='Sensitivity' | newdata$variable=='Specificity',]
sensitivity$classifier <- sub('knn','KNN',sensitivity$classifier)
sensitivity$classifier <- sub('lda','LDA',sensitivity$classifier)
sensitivity$classifier <- sub('lpm','LPM',sensitivity$classifier)
sensitivity$classifier <- sub('rf','RF',sensitivity$classifier)
sensitivity$classifier <- sub('svm.l','SVM (linear)',sensitivity$classifier)
sensitivity$classifier <- sub('svm.r','SVM (radial)',sensitivity$classifier)
sensitivity$kwset <- sub('lasso','Lasso',sensitivity$kwset)
sensitivity$kwset <- sub('t10','T10',sensitivity$kwset)
sensitivity$kwset <- sub('t100','T100',sensitivity$kwset)
sensitivity$kwset <- sub('t50b50','T50B50',sensitivity$kwset)
names(sensitivity) <- c('classifier','Keywords.Selection', 'Performance', 'Value')
c <- ggplot(sensitivity, aes(x=Keywords.Selection, y=Value, fill=Performance))
c <- c + geom_bar(stat='identity', position=position_dodge())
c <- c + facet_wrap(~classifier)
c <- c + ggtitle('Comparative Model Performance')
c
ggsave('results.png')
results$classifier <- sub('knn','KNN',results$classifier)
results$classifier <- sub('lda','LDA',results$classifier)
results$classifier <- sub('lpm','LPM',results$classifier)
results$classifier <- sub('rf','RF',results$classifier)
results$classifier <- sub('svm.l','SVM (linear)',results$classifier)
results$classifier <- sub('svm.r','SVM (radial)',results$classifier)
results$kwset <- sub('lasso','Lasso',results$kwset)
results$kwset <- sub('t10','T10',results$kwset)
results$kwset <- sub('t100','T100',results$kwset)
results$kwset <- sub('t50b50','T50B50',results$kwset)
write.csv(results,'finalresults.csv',row.names=F)
keywords.h1
keywords.g1
keywords.g1[51:100]
keywords.g1[51:98]
keywords.g1[49:98]
keywords.g1[48:98]
keywords.g1[50:98]
keywords.g2[51:100]
keywords.g2[50:98]
keywords.g2[51:98]
keywords.g3[51:98]
keywords.g3[51:100]
keywords.g5[51:100]
keywords.g4[51:100]
keywords.g4[48:100]
keywords.g4[49:100]
keywords.g4[49:98]
keywords.g5[49:99]
keywords.g5[49:97]
keywords.g1[49:98]
keywords.g2[50:98]
keywords.g3[50:100]
keywords.g3[51:100]
nwords1 <- keywords.g1[49:98]
nwords2 <- keywords.g2[50:98]
nwords3 <- keywords.g3[51:100]
nwords4 <- keywords.g4[49:98]
nwords5 <- keywords.g5[49:97]
nwords1 %in% nwords2
length(grep('FALSE', nwords1 %in% nwords2))
length(grep('FALSE', nwords1 %in% nwords2))
length(grep('FALSE', nwords1 %in% nwords3))
length(grep('FALSE', nwords1 %in% nwords4))
length(grep('FALSE', nwords1 %in% nwords5))
length(grep('FALSE', nwords2 %in% nwords3))
length(grep('FALSE', nwords2 %in% nwords3))
length(grep('FALSE', nwords1 %in% nwords2))/length(nwords1)
length(grep('FALSE', nwords1 %in% nwords2))/length(nwords1)
length(grep('FALSE', nwords1 %in% nwords3))/length(nwords1)
length(grep('FALSE', nwords1 %in% nwords4))/length(nwords1)
length(grep('FALSE', nwords1 %in% nwords5))/length(nwords1)
length(grep('FALSE', nwords2 %in% nwords3))/length(nwords1)
length(grep('FALSE', nwords3 %in% nwords4))/length(nwords3)
length(grep('FALSE', nwords3 %in% nwords5))/length(nwords3)
length(grep('FALSE', nwords4 %in% nwords5))/length(nwords4)
length(grep('FALSE', nwords4 %in% nwords5))/length(nwords4)
length(grep('FALSE', nwords4 %in% nwords5))
1-length(grep('FALSE', nwords1 %in% nwords2))/length(nwords1)
1-length(grep('FALSE', nwords1 %in% nwords3))/length(nwords1)
1-length(grep('FALSE', nwords1 %in% nwords4))/length(nwords1)
1-length(grep('FALSE', nwords1 %in% nwords5))/length(nwords1)
1-length(grep('FALSE', nwords2 %in% nwords3))/length(nwords2)
pwords1 <- keywords.g1[1:48]
pwords2 <- keywords.g2[1:49]
pwords3 <- keywords.g3[1:50]
pwords4 <- keywords.g4[1:48]
pwords5 <- keywords.g5[1:48]
1-length(grep('FALSE', pwords1 %in% pwords2))/length(pwords1)
1-length(grep('FALSE', pwords1 %in% pwords3))/length(pwords1)
1-length(grep('FALSE', pwords1 %in% pwords4))/length(pwords1)
1-length(grep('FALSE', pwords1 %in% pwords5))/length(pwords1)
1-length(grep('FALSE', pwords2 %in% pwords3))/length(pwords2)
1-length(grep('FALSE', pwords2 %in% pwords4))/length(pwords2)
1-length(grep('FALSE', pwords2 %in% pwords5))/length(pwords2)
1-length(grep('FALSE', pwords3 %in% pwords4))/length(pwords3)
1-length(grep('FALSE', pwords3 %in% pwords5))/length(pwords3)
1-length(grep('FALSE', pwords4 %in% pwords5))/length(pwords4)
?ave
ave(5,7)
ave(5+7)
mean(5,7)
mean(5+7)
mean(c(5,7,8))
mean(c(1-length(grep('FALSE', pwords1 %in% pwords2))/length(pwords1),
1-length(grep('FALSE', pwords1 %in% pwords3))/length(pwords1),
1-length(grep('FALSE', pwords1 %in% pwords4))/length(pwords1),
1-length(grep('FALSE', pwords1 %in% pwords5))/length(pwords1),
1-length(grep('FALSE', pwords2 %in% pwords3))/length(pwords2),
1-length(grep('FALSE', pwords2 %in% pwords4))/length(pwords2),
1-length(grep('FALSE', pwords2 %in% pwords5))/length(pwords2),
1-length(grep('FALSE', pwords3 %in% pwords4))/length(pwords3),
1-length(grep('FALSE', pwords3 %in% pwords5))/length(pwords3),
1-length(grep('FALSE', pwords4 %in% pwords5))/length(pwords4),
1-length(grep('FALSE', pwords2 %in% pwords1))/length(pwords2),
1-length(grep('FALSE', pwords3 %in% pwords1))/length(pwords3),
1-length(grep('FALSE', pwords4 %in% pwords1))/length(pwords4),
1-length(grep('FALSE', pwords5 %in% pwords1))/length(pwords5),
1-length(grep('FALSE', pwords3 %in% pwords2))/length(pwords3),
1-length(grep('FALSE', pwords4 %in% pwords2))/length(pwords4),
1-length(grep('FALSE', pwords5 %in% pwords2))/length(pwords5),
1-length(grep('FALSE', pwords4 %in% pwords3))/length(pwords4),
1-length(grep('FALSE', pwords5 %in% pwords3))/length(pwords5),
1-length(grep('FALSE', pwords5 %in% pwords4))/length(pwords5))
1-length(grep('FALSE', pwords5 %in% pwords4))/length(pwords5)))
mean(c(1-length(grep('FALSE', pwords1 %in% pwords2))/length(pwords1),
1-length(grep('FALSE', pwords1 %in% pwords3))/length(pwords1),
1-length(grep('FALSE', pwords1 %in% pwords4))/length(pwords1),
1-length(grep('FALSE', pwords1 %in% pwords5))/length(pwords1),
1-length(grep('FALSE', pwords2 %in% pwords3))/length(pwords2),
1-length(grep('FALSE', pwords2 %in% pwords4))/length(pwords2),
1-length(grep('FALSE', pwords2 %in% pwords5))/length(pwords2),
1-length(grep('FALSE', pwords3 %in% pwords4))/length(pwords3),
1-length(grep('FALSE', pwords3 %in% pwords5))/length(pwords3),
1-length(grep('FALSE', pwords4 %in% pwords5))/length(pwords4),
1-length(grep('FALSE', pwords2 %in% pwords1))/length(pwords2),
1-length(grep('FALSE', pwords3 %in% pwords1))/length(pwords3),
1-length(grep('FALSE', pwords4 %in% pwords1))/length(pwords4),
1-length(grep('FALSE', pwords5 %in% pwords1))/length(pwords5),
1-length(grep('FALSE', pwords3 %in% pwords2))/length(pwords3),
1-length(grep('FALSE', pwords4 %in% pwords2))/length(pwords4),
1-length(grep('FALSE', pwords5 %in% pwords2))/length(pwords5),
1-length(grep('FALSE', pwords4 %in% pwords3))/length(pwords4),
1-length(grep('FALSE', pwords5 %in% pwords3))/length(pwords5),
1-length(grep('FALSE', pwords5 %in% pwords4))/length(pwords5)))
mean(c(1-length(grep('FALSE', nwords1 %in% nwords2))/length(nwords1),
1-length(grep('FALSE', nwords1 %in% nwords3))/length(nwords1),
1-length(grep('FALSE', nwords1 %in% nwords4))/length(nwords1),
1-length(grep('FALSE', nwords1 %in% nwords5))/length(nwords1),
1-length(grep('FALSE', nwords2 %in% nwords3))/length(nwords2),
1-length(grep('FALSE', nwords2 %in% nwords4))/length(nwords2),
1-length(grep('FALSE', nwords2 %in% nwords5))/length(nwords2),
1-length(grep('FALSE', nwords3 %in% nwords4))/length(nwords3),
1-length(grep('FALSE', nwords3 %in% nwords5))/length(nwords3),
1-length(grep('FALSE', nwords4 %in% nwords5))/length(nwords4),
1-length(grep('FALSE', nwords2 %in% nwords1))/length(nwords2),
1-length(grep('FALSE', nwords3 %in% nwords1))/length(nwords3),
1-length(grep('FALSE', nwords4 %in% nwords1))/length(nwords4),
1-length(grep('FALSE', nwords5 %in% nwords1))/length(nwords5),
1-length(grep('FALSE', nwords3 %in% nwords2))/length(nwords3),
1-length(grep('FALSE', nwords4 %in% nwords2))/length(nwords4),
1-length(grep('FALSE', nwords5 %in% nwords2))/length(nwords5),
1-length(grep('FALSE', nwords4 %in% nwords3))/length(nwords4),
1-length(grep('FALSE', nwords5 %in% nwords3))/length(nwords5),
1-length(grep('FALSE', nwords4 %in% nwords4))/length(nwords4)))
1-.639
mean(c(1-length(grep('FALSE', pwords1 %in% pwords2))/length(pwords1),
1-length(grep('FALSE', pwords1 %in% pwords3))/length(pwords1),
1-length(grep('FALSE', pwords1 %in% pwords4))/length(pwords1),
1-length(grep('FALSE', pwords1 %in% pwords5))/length(pwords1),
1-length(grep('FALSE', pwords2 %in% pwords3))/length(pwords2),
1-length(grep('FALSE', pwords2 %in% pwords4))/length(pwords2),
1-length(grep('FALSE', pwords2 %in% pwords5))/length(pwords2),
1-length(grep('FALSE', pwords3 %in% pwords4))/length(pwords3),
1-length(grep('FALSE', pwords3 %in% pwords5))/length(pwords3),
1-length(grep('FALSE', pwords4 %in% pwords5))/length(pwords4),
1-length(grep('FALSE', pwords2 %in% pwords1))/length(pwords2),
1-length(grep('FALSE', pwords3 %in% pwords1))/length(pwords3),
1-length(grep('FALSE', pwords4 %in% pwords1))/length(pwords4),
1-length(grep('FALSE', pwords5 %in% pwords1))/length(pwords5),
1-length(grep('FALSE', pwords3 %in% pwords2))/length(pwords3),
1-length(grep('FALSE', pwords4 %in% pwords2))/length(pwords4),
1-length(grep('FALSE', pwords5 %in% pwords2))/length(pwords5),
1-length(grep('FALSE', pwords4 %in% pwords3))/length(pwords4),
1-length(grep('FALSE', pwords5 %in% pwords3))/length(pwords5),
1-length(grep('FALSE', pwords5 %in% pwords4))/length(pwords5)))
1-.873
NAICS.Codes <- c('5112', '5182', '5191', '5241', '5242',
'5412', '5415', '5416', '5419', '5614'
)
Percent.Health.Related <- c('32%', '52%', '23%','60%','20%', '40%', '48%', '36%', '32%', '56%')
Descriptions <- c('Software Publishers',
'Data Processing, Hosting, and Related Services',
'All Other Information Services',
'Insurance',
'Insurance',
'Accounting Services',
'Computer Systems',
'Consulting Services',
'Marketing Research',
'Business Support Services')
cbind(NAICS.Codes, Percent.Health.Related, Descriptions)
sumstats <- cbind(NAICS.Codes, Percent.Health.Related, Descriptions)
write.csv(sumstats, 'sumstats.csv', row.names=F)
keywords.f <- cbind(keywords.f1,keywords.f2,keywords.f3,keywords.f4,keywords.f5)
keywords.f
write.table(keywords.f, 't100keywords.csv', row.names=F)
write.table(keywords.f, 't100keywords.csv', row.names=F, sep=',')
keywords.g <- cbind(keywords.g1,keywords.g2,keywords.g3,keywords.g4,keywords.g5)
write.table(keywords.g, 't50b50keywords.csv', row.names=F, sep=',')
lasso.keywords <- cbind(lasso.keywords1,lasso.keywords2,lasso.keywords3,
lasso.keywords4,lasso.keywords5)
write.table(lasso.keywords, 'lkeywords.csv', row.names=F, sep=',')
