?rnorm
a <- rnorm(100,0,1)
a1 <- rnorm(100,0,1)
a2 <- rnorm(100,0,1)
a3 <- rnorm(100,0,1)
a4 <- rnorm(100,0,1)
a5 <- rnorm(100,0,1)
da1 <- a5-a4
da2 <- a4-a3
da3 <- a3-a2
da4 <- a2-a1
cor(da1,da2)
cor(da2,da3)
cor(da3,da4)
cor.test(da1,da2)
length(a)
for(i in 1:length(a)) {
a <- a + 100
hist(a, col="brickred", main = "My Histogram", borders = NA,
xlab = "Distribution")
}
?hist
for(i in 1:length(a)) {
a <- a + 100
hist(a, col="brickred", main = "My Histogram", border = NA,
xlab = "Distribution")
}
for(i in 1:length(a)) {
a <- a + 100
hist(a, col="Brick Red", main = "My Histogram", border = NA,
xlab = "Distribution")
}
for(i in 1:length(a)) {
a <- a + 100
hist(a, col="Brickred", main = "My Histogram", border = NA,
xlab = "Distribution")
}
for(i in 1:length(a)) {
a <- a + 100
hist(a, col="red", main = "My Histogram", border = NA,
xlab = "Distribution")
}
for(i in 1:length(a)) {
a <- a + 100
hist(a, col="red", main = "My Histogram", border = NA,
xlab = "Distribution")
}
for(i in 1:length(a)) {
a <- a + 100
hist(a, col="red", main = "My Histogram", border = NA,
xlab = "Distribution")
}
for(i in 1:length(a)) {
a <- a + 100
hist(a, col="red", main = "My Histogram", border = NA,
xlab = "Distribution")
}
for(i in 1:length(a)) {
a <- a + 100
hist(a, col="red", main = "My Histogram", border = NA,
xlab = "Distribution")
}
?star
?heatmap
a <- as.matrix(a1, a2, a3, a4, a5)
a
a <- as.matrix(cbind(a1, a2, a3, a4, a5))
a
heatmap(a)
a <- as.dataframe(a)
a <- as.df(a)
a <- as.data.frame(a)
a
a[,3:5]
a[1:50,3:5]
b<-a[1:50,3:5]
heatmap(b)
a <- as.matrix(cbind(a1, a2, a3, a4, a5))
b<-a[1:50,3:5]
heatmap(b)
a <- as.matrix(cbind(a1, a2, a3, a4, a5))
a <- as.data.frame(a)
a
?apply
length(a)
for(i in 1:length(a)){
sum(a[,i])
}
for(i in 1:length(a)){
sum(a[,i])
}
for(i in 1:length(a)){
a <- sum(a[,i])
b <- cbind(b,a)
}
b
b
b
a
a <- as.matrix(cbind(a1, a2, a3, a4, a5))
a
c <- vector()
for(i in 1:length(a)){
b <- sum(a[,i])
c <- c(c,b)
}
c
?apply
apply(a, 2, sum)
sumdataframe <- function(x,...){
c <- vector()
for(i in 1:length(x)){
b <- sum(x[,i])
c <- c(c,b)
}
c
}
sumdataframe(a)
c <- vector()
for(i in 1:length(a)){
b <- sum(a[,i])
c <- c(c,b)
}
c
colSums
colSums(a)
colMeans(a)
?var
?apply
apply(a, 2, var)
apply(a, 2, aum)
apply(a, 2, sum)
apply(a, 1, var)
apply(a, 1, sum)
rowSums(a)
rowMeans(a)
?dapply
?sapply
apply(a, 2, sum)
class(a)
class(apply(a, 2, sum))
class(lapply(a, 2, sum))
class(lapply(a, sum))
lapply(a, sum)
?lapply
sapply(a, sum)
?sapply
class(sapply(a, sum))
class(a)
class(sapply(a, sum))
?split
?factor
b <- rnorm(100)
a <- rnorm(100)
cor(a,b)
y1 <- rnorm(100)
y2 <- rnorm(100)
y3 <- rnorm(100)
cor.test(y1, y2)
cor.test(y2, y3)
d1 <- y2-y1
d2 <- y3-y2
cor.test(d1,d2)
y1 <- rnorm(100)
y2 <- rnorm(100)
y3 <- rnorm(100)
d1 <- y2-y1
d2 <- y3-y2
cor.test(d1,d2)
y1 <- rnorm(100)
y2 <- rnorm(100)
y3 <- rnorm(100)
d1 <- y2-y1
d2 <- y3-y2
cor.test(d1,d2)
y1 <- rnorm(100)
y2 <- rnorm(100)
y3 <- rnorm(100)
d1 <- y2-y1
d2 <- y3-y2
cor.test(d1,d2)
y1 <- rnorm(100)
y2 <- rnorm(100)
y3 <- rnorm(100)
d1 <- y2-y1
d2 <- y3-y2
cor.test(d1,d2)
y1 <- rnorm(100)
y2 <- rnorm(100)
y3 <- rnorm(100)
d1 <- y2-y1
d2 <- y3-y2
cor.test(d1,d2)
y1 <- rnorm(100)
y2 <- rnorm(100)
y3 <- rnorm(100)
d1 <- y2-y1
d2 <- y3-y2
cor.test(d1,d2)
y1 <- rnorm(100)
y2 <- rnorm(100)
y3 <- rnorm(100)
d1 <- y2-y1
d2 <- y3-y2
cor.test(d1,d2)
y1 <- rnorm(100)
y2 <- rnorm(100)
y3 <- rnorm(100)
d1 <- y2-y1
d2 <- y3-y2
cor.test(d1,d2)
library(pandoc)
?rmarkdown
library(rJava)
Sys.setenv(JAVA_HOME='C:/Program Files (x86)/Java/jre1.8.0_40')
library(rJava)
R.Version()
Sys.setenv(JAVA_HOME='C:/Program Files (x86)/Java/jre1.8.0_40/bin/client')
library(rJava)
Sys.setenv(JAVA_HOME='C:/Program Files (x86)/Java/jre1.8.0_40/bin/client')
library(rJava)
R.Version()
options(java.home="C:\\Program Files (x86)\\Java\\jre1.8.0_40\\")
options(java.parameters = "-Xmx10000m")
library(rJava)
library(RWeka)
options(java.home="C:\\Program Files (x86)\\Java\\jre1.8.0_40\\")
options(java.parameters = "-Xmx10000m")
library(rJava)
library(RWeka)
.jint()
.jinit()
?.jinit()
options(java.home="C:\\Program Files (x86)\\Java\\jre1.8.0_40\\bin\\client")
library(RWeka)
library(RWeka)
library(rJava)
library(RWeka)
options(java.home="C:\\Program Files (x86)\\Java\\jre1.8.0_40\\")
options(java.parameters = "-Xmx10000m")
library(rJava)
library(RWeka)
library(tm)
.jinit(classpath="myClasses.jar", parameters="-Xmx10000m")
.jinit(classpath="myClasses.jar", parameters="-Xmx10000m")
library(rJava)
.jinit(classpath="myClasses.jar", parameters="-Xmx10000m")
options(java.home="C:\\Program Files (x86)\\Java\\jre1.8.0_40\\bin\\")
library(rJava)
library(RWeka)
.jinit(classpath="myClasses.jar", parameters="-Xmx10000m")
library(RWeka)
options(java.parameters = "-Xmx10000m")
library(rJava)
library(RWeka)
system('java -version')
install.packages('rJava')
install.packages("rJava")
options(java.home="C:\\Program Files (x86)\\Java\\jre1.8.0_40\\bin\\")
options(java.parameters = "-Xmx10000m")
library(rJava)
library(RWeka)
.jinit(classpath="myClasses.jar", parameters="-Xmx10000m")
library("rJava", lib.loc="~/R/win-library/3.1")
library(RWeka)
library("RWeka", lib.loc="~/R/win-library/3.1")
library("RWekajars", lib.loc="~/R/win-library/3.1")
detach("package:RWeka", unload=TRUE)
detach("package:RWekajars", unload=TRUE)
remove.packages(rJava)
install.packages('rJava')
install.packages("rJava")
options(java.home="C:\\Program Files (x86)\\Java\\jre1.8.0_40\\bin\\")
options(java.parameters = "-Xmx10000m")
library(rJava)
library(rJava)
library(rJava)
install.packages('trees')
library(trees)
hist(Sales)
attach(Carseats)
library(ISLR)
attach(Carseats)
hist(Sales)
high=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats, High)
Carseats=data.frame(Carseats, high)
tree.carseats=tree(High~.-Sales,data=Carseats)
library(trees)
install.packages('tree')
library(tree)
tree.carseats=tree(High~.-Sales,data=Carseats)
tree.carseats=tree(high~.-Sales,data=Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats,pretty=0)
tree.carseats
install.packages('randomForest')
library(randomForest)
set.seed(101)
dim(Boston)
require(MASS)
dim(Boston)
train = sample(1:nrow(Boston), 300)
rf.boston = randomForest(medv~., data=Boston, subset=train)
rf.boston
oob.err=double(13)
test.err=double(13)
?double
for(mtry in 1:13) {
fit=randomForest(medv~.,data=Boston,subset=train,mtry=mtry,ntree=400)
obb.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]=with(Boston[-train,],mean(medv~pred)^2)
cat(mtry, " ")
}
for(mtry in 1:13) {
fit=randomForest(medv~.,data=Boston,subset=train,mtry=mtry,ntree=400)
oob.err[mtry]=fit$mse[400]
pred=predict(fit,Boston[-train,])
test.err[mtry]=with(Boston[-train,],mean(medv~pred)^2)
cat(mtry, " ")
}
a <- read.csv('training2.csv')
setwd('C:\\Users\\mdrub_000\\Desktop\\Github\\Data-Science-Final-Project')
a <- read.csv('training2.csv')
library(doBy)
names(a)
?summaryBy
summaryBy(HC ~ NAICS.Code)
summaryBy(HC ~ NAICS.Code, data=a)
setwd('C:\\Users\\mdrub_000\\Desktop\\Github\\Data-Science-Final-Project')
data <- read.csv('scrape.csv')
dmatrix <- data[,c(2:9,12)] ##DF of only y and x variables
library(e1071)
svmcv <- dmatrix[-475,-3] ##Getting Rid of Optical
svmcv$healthcat <- as.factor(svmcv$healthcat)
set.seed(35)
l.tune.out = tune(svm, healthcat~., data=svmcv, kernel='linear',
ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
lbestmod = l.tune.out$best.model
lbestmod
str(lbestmod)
summary(lbestmod)
str(summary(lbestmod))
